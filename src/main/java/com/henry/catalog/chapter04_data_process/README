Java中 现有对于集合的操作 并不叫人满意：
1 不能声明式地进行迭代操作 - 每次都要弄个for循环；
2 没办法很方便地编写并行代码。

===
流
是：Java8所提供新的API；
作用：支持程序员 用声明式地方式来处理数据集合；
特征：
    1 使用查询语句地方式来编写代码 - 不需要每次都提供一个新的实现。
    2 编写出地代码能够无成本地 支持并行处理。
用法：
    1 得到一个Stream对象；
    2 在得到的Stream对象上执行自己希望的操作；

---
重新定义流：从 支持数据处理操作的源 所生成的元素序列；
概念：
    集合 数据结构 - 用于存储、访问元素；
    流   ？？？ - 用于计算。

    源： 流需要一个提供数据的源，比如集合、数组、IO资源等
    特征：流中的元素 会保持 原有源的元素顺序。

    数据处理操作：像是CRUD以及更多操作。
特征：
    1 流水线；
        一些流操作的本身会返回一个流对象 - 这些操作也就能够被串联起来，形成一个操作流水线【这会方便内部的优化】；
    2 内部迭代：
        流的迭代操作是在内部进行的，不需要显式地编写代码。
    3 只有在调用到collect()方法时，才会触发整个流水线。
Stream API：
    1 filter() - 用于过滤；
    2 map() - 用于把元素转化成为其他形式 OR 提取元素中的信息；
    3 limit() - 限定数量；
    4 collect() - 把流转化成为其他形式。

===
流 VS 集合

集合：DVD上存储的电影资源；
流：流媒体播放器上实时播放的视频资源（按需下载） OR 互联网上搜索到的结果（按需查看）

关键差异：什么时刻开始计算👇
对于集合，每个元素都先计算出来后，才能添加到集合中。
对于流，流中的元素都是按需计算的。（而且不能够向流中增删元素?） - 有点子像一个按需创建的集合

可使用次数👇
集合中的元素都已经在内存中了，因此集合可以使用多次；
流中的元素一旦被消费就不存在了，因此流只能使用一次。

遍历数据的方式👇
集合 - 使用外部迭代；一步步地指定事情地每一个步骤
流 - 使用内部迭代；一次性声明一件事情

===
流的操作

1 中间操作 - 特征：可以被连接起来，成为一条流水线；
2 终端操作 - 用于触发流水线执行 & 关闭流。

